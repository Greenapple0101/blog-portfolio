apiVersion: apps/v1
kind: Deployment
metadata:
  name: devnote-blog
  namespace: production
  labels:
    app: devnote-blog
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: devnote-blog
  template:
    metadata:
      labels:
        app: devnote-blog
        version: v1
    spec:
      containers:
      - name: devnote-blog
        image: your-registry.com/devnote-blog:latest
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: devnote-secrets
              key: db-host
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: devnote-secrets
              key: db-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: devnote-secrets
              key: db-password
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: devnote-secrets
              key: redis-host
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: devnote-secrets
              key: jwt-secret
        - name: MAIL_USERNAME
          valueFrom:
            secretKeyRef:
              name: devnote-secrets
              key: mail-username
        - name: MAIL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: devnote-secrets
              key: mail-password
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: devnote-uploads-pvc
      imagePullSecrets:
      - name: docker-registry-secret

---
apiVersion: v1
kind: Service
metadata:
  name: devnote-blog-service
  namespace: production
spec:
  selector:
    app: devnote-blog
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: devnote-blog-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.devnote.com
    secretName: devnote-tls
  rules:
  - host: api.devnote.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: devnote-blog-service
            port:
              number: 80

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: devnote-uploads-pvc
  namespace: production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2

---
apiVersion: v1
kind: Secret
metadata:
  name: devnote-secrets
  namespace: production
type: Opaque
data:
  db-host: <base64-encoded-db-host>
  db-username: <base64-encoded-db-username>
  db-password: <base64-encoded-db-password>
  redis-host: <base64-encoded-redis-host>
  jwt-secret: <base64-encoded-jwt-secret>
  mail-username: <base64-encoded-mail-username>
  mail-password: <base64-encoded-mail-password>

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: production
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <base64-encoded-docker-config>
